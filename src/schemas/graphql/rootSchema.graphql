type Query {
    developers(limit: Int): [Developer]
    developer(id: ID!): Developer
  }

  type Developer {
    id: ID!
    name: String!
    games: [Game]
}
  type Query {
    games(developer: ID, platform: ID, genre: ID, release_year: Int, limit: Int): [Game]
    game(id: ID!): Game
  }

  type Mutation {
    addGame(data: CreateGameInput!): Game!
    deleteGame(id: ID!): Game!
    updateGame(id: ID!, data: UpdateGameInput!): Game!
  }

  type Game {
    id: ID!
    title: String!
    release_year: Int!
    genre: [String]
    platforms: [String]!
    rating: String
    developers: [Developer]!
  }  

  input CreateGameInput {
    id: ID
    title: String!
    release_year: Int!
    genre: [ID]
    platforms: [ID]!
    rating: ID
    developers: [ID]!
  }

  input UpdateGameInput {
    title: String
    release_year: Int
    genre: [ID]
    platforms: [ID]
    rating: ID
    developers: [ID]
  }
  type Query {
    genres: [Genre]
    genre(id: ID!): Genre
  }

  type Genre {
    id: ID!
    name: String!
  }
  type Query {
    platforms: [Platform]
    platform(id: ID!): Platform
  }

  type Platform {
    id: ID!
    name: String!
  }
  type Query {
    ratings: [Rating]
    rating(gameId: ID!): Rating
  }

  type Rating {
    id: ID!
    text: String!
  }
  type Mutation {
    registerUser(data: CreateUserInput!): User!
    loginUser(data: CreateLoginInput!): AuthPayload!
  }

  type User {
    email: String!
    username: String!
  }  

  input CreateUserInput {
    id: ID
    email: String!
    username: String!
    password: String!
  }

  input CreateLoginInput {
    username: String!
    password: String!
  }

  type AuthPayload {
    token: String!
  }
